// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: protocol/common/partner/device.proto

package partner

import (
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	tsl "tcl.com/gaia/protocol/tsl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_UNKNOWN           DeviceType = 0
	DeviceType_DEVICE_TYPE_AIR_CONDITIONER   DeviceType = 1
	DeviceType_DEVICE_TYPE_AIR_CLEANER       DeviceType = 2
	DeviceType_DEVICE_TYPE_WATER_PURIFIER    DeviceType = 3
	DeviceType_DEVICE_TYPE_TELEVISION        DeviceType = 4
	DeviceType_DEVICE_TYPE_PHONE             DeviceType = 5
	DeviceType_DEVICE_TYPE_PERSONAL_COMPUTER DeviceType = 6
	DeviceType_DEVICE_TYPE_SOCKET            DeviceType = 7
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_UNKNOWN",
		1: "DEVICE_TYPE_AIR_CONDITIONER",
		2: "DEVICE_TYPE_AIR_CLEANER",
		3: "DEVICE_TYPE_WATER_PURIFIER",
		4: "DEVICE_TYPE_TELEVISION",
		5: "DEVICE_TYPE_PHONE",
		6: "DEVICE_TYPE_PERSONAL_COMPUTER",
		7: "DEVICE_TYPE_SOCKET",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_UNKNOWN":           0,
		"DEVICE_TYPE_AIR_CONDITIONER":   1,
		"DEVICE_TYPE_AIR_CLEANER":       2,
		"DEVICE_TYPE_WATER_PURIFIER":    3,
		"DEVICE_TYPE_TELEVISION":        4,
		"DEVICE_TYPE_PHONE":             5,
		"DEVICE_TYPE_PERSONAL_COMPUTER": 6,
		"DEVICE_TYPE_SOCKET":            7,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_common_partner_device_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_protocol_common_partner_device_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceType(num)
	return nil
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{0}
}

type ConnectionType int32

const (
	ConnectionType_CONNECTION_TYPE_UNKNOWN  ConnectionType = 0
	ConnectionType_CONNECTION_TYPE_WIFI     ConnectionType = 1
	ConnectionType_CONNECTION_TYPE_CELLULAR ConnectionType = 2
	ConnectionType_CONNECTION_TYPE_ZIG_BEE  ConnectionType = 3
	ConnectionType_CONNECTION_TYPE_Z_WAVE   ConnectionType = 4
	ConnectionType_CONNECTION_TYPE_LORA     ConnectionType = 5
	ConnectionType_CONNECTION_TYPE_NB_IOT   ConnectionType = 6
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNKNOWN",
		1: "CONNECTION_TYPE_WIFI",
		2: "CONNECTION_TYPE_CELLULAR",
		3: "CONNECTION_TYPE_ZIG_BEE",
		4: "CONNECTION_TYPE_Z_WAVE",
		5: "CONNECTION_TYPE_LORA",
		6: "CONNECTION_TYPE_NB_IOT",
	}
	ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNKNOWN":  0,
		"CONNECTION_TYPE_WIFI":     1,
		"CONNECTION_TYPE_CELLULAR": 2,
		"CONNECTION_TYPE_ZIG_BEE":  3,
		"CONNECTION_TYPE_Z_WAVE":   4,
		"CONNECTION_TYPE_LORA":     5,
		"CONNECTION_TYPE_NB_IOT":   6,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_common_partner_device_proto_enumTypes[1].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_protocol_common_partner_device_proto_enumTypes[1]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConnectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConnectionType(num)
	return nil
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{1}
}

type DeviceReachAbilityValue int32

const (
	DeviceReachAbilityValue_DEVICE_REACH_ABILITY_VALUE_UNKNOWN DeviceReachAbilityValue = 0
	DeviceReachAbilityValue_DEVICE_REACH_ABILITY_VALUE_ONLINE  DeviceReachAbilityValue = 1
	DeviceReachAbilityValue_DEVICE_REACH_ABILITY_VALUE_OFFLINE DeviceReachAbilityValue = 2
)

// Enum value maps for DeviceReachAbilityValue.
var (
	DeviceReachAbilityValue_name = map[int32]string{
		0: "DEVICE_REACH_ABILITY_VALUE_UNKNOWN",
		1: "DEVICE_REACH_ABILITY_VALUE_ONLINE",
		2: "DEVICE_REACH_ABILITY_VALUE_OFFLINE",
	}
	DeviceReachAbilityValue_value = map[string]int32{
		"DEVICE_REACH_ABILITY_VALUE_UNKNOWN": 0,
		"DEVICE_REACH_ABILITY_VALUE_ONLINE":  1,
		"DEVICE_REACH_ABILITY_VALUE_OFFLINE": 2,
	}
)

func (x DeviceReachAbilityValue) Enum() *DeviceReachAbilityValue {
	p := new(DeviceReachAbilityValue)
	*p = x
	return p
}

func (x DeviceReachAbilityValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceReachAbilityValue) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_common_partner_device_proto_enumTypes[2].Descriptor()
}

func (DeviceReachAbilityValue) Type() protoreflect.EnumType {
	return &file_protocol_common_partner_device_proto_enumTypes[2]
}

func (x DeviceReachAbilityValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceReachAbilityValue) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceReachAbilityValue(num)
	return nil
}

// Deprecated: Use DeviceReachAbilityValue.Descriptor instead.
func (DeviceReachAbilityValue) EnumDescriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{2}
}

type ConnectionAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectionAddress) Reset() {
	*x = ConnectionAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_partner_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionAddress) ProtoMessage() {}

func (x *ConnectionAddress) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_partner_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionAddress.ProtoReflect.Descriptor instead.
func (*ConnectionAddress) Descriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{0}
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *ConnectionType    `protobuf:"varint,1,req,name=type,enum=protocol.common.partner.ConnectionType" json:"type,omitempty"`
	Address *ConnectionAddress `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_partner_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_partner_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{1}
}

func (x *Connection) GetType() ConnectionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ConnectionType_CONNECTION_TYPE_UNKNOWN
}

func (x *Connection) GetAddress() *ConnectionAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

type Geolocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude *float32 `protobuf:"fixed32,1,req,name=longitude" json:"longitude,omitempty"`
	Latitude  *float32 `protobuf:"fixed32,2,req,name=latitude" json:"latitude,omitempty"`
}

func (x *Geolocation) Reset() {
	*x = Geolocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_partner_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geolocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geolocation) ProtoMessage() {}

func (x *Geolocation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_partner_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geolocation.ProtoReflect.Descriptor instead.
func (*Geolocation) Descriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{2}
}

func (x *Geolocation) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *Geolocation) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room  *string `protobuf:"bytes,1,req,name=room" json:"room,omitempty"`
	Floor *int32  `protobuf:"varint,2,req,name=floor" json:"floor,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_partner_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_partner_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{3}
}

func (x *Location) GetRoom() string {
	if x != nil && x.Room != nil {
		return *x.Room
	}
	return ""
}

func (x *Location) GetFloor() int32 {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return 0
}

type FirmwareVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WifiModule *string `protobuf:"bytes,1,req,name=wifiModule" json:"wifiModule,omitempty"`
	Mcu        *int32  `protobuf:"varint,2,req,name=mcu" json:"mcu,omitempty"`
}

func (x *FirmwareVersions) Reset() {
	*x = FirmwareVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_partner_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareVersions) ProtoMessage() {}

func (x *FirmwareVersions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_partner_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareVersions.ProtoReflect.Descriptor instead.
func (*FirmwareVersions) Descriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{4}
}

func (x *FirmwareVersions) GetWifiModule() string {
	if x != nil && x.WifiModule != nil {
		return *x.WifiModule
	}
	return ""
}

func (x *FirmwareVersions) GetMcu() int32 {
	if x != nil && x.Mcu != nil {
		return *x.Mcu
	}
	return 0
}

type DeviceIcons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dp32 *string `protobuf:"bytes,1,opt,name=dp32" json:"dp32,omitempty"`
	Dp64 *string `protobuf:"bytes,2,opt,name=dp64" json:"dp64,omitempty"`
}

func (x *DeviceIcons) Reset() {
	*x = DeviceIcons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_partner_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIcons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIcons) ProtoMessage() {}

func (x *DeviceIcons) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_partner_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIcons.ProtoReflect.Descriptor instead.
func (*DeviceIcons) Descriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceIcons) GetDp32() string {
	if x != nil && x.Dp32 != nil {
		return *x.Dp32
	}
	return ""
}

func (x *DeviceIcons) GetDp64() string {
	if x != nil && x.Dp64 != nil {
		return *x.Dp64
	}
	return ""
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId         *string           `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	DeviceName       *string           `protobuf:"bytes,2,opt,name=deviceName" json:"deviceName,omitempty"`
	TslId            *string           `protobuf:"bytes,3,opt,name=tslId" json:"tslId,omitempty"`
	DeviceType       *DeviceType       `protobuf:"varint,4,opt,name=deviceType,enum=protocol.common.partner.DeviceType" json:"deviceType,omitempty"`
	TenantId         *string           `protobuf:"bytes,5,opt,name=tenantId" json:"tenantId,omitempty"`
	ManufacturerId   *string           `protobuf:"bytes,6,opt,name=manufacturerId" json:"manufacturerId,omitempty"`
	Model            *string           `protobuf:"bytes,7,opt,name=model" json:"model,omitempty"`
	ParentId         *string           `protobuf:"bytes,8,opt,name=parentId" json:"parentId,omitempty"`
	SerialNo         *string           `protobuf:"bytes,9,opt,name=serialNo" json:"serialNo,omitempty"`
	Mac              *string           `protobuf:"bytes,10,opt,name=mac" json:"mac,omitempty"`
	Connections      []*Connection     `protobuf:"bytes,11,rep,name=Connections" json:"Connections,omitempty"`
	Geolocation      *Geolocation      `protobuf:"bytes,12,opt,name=geolocation" json:"geolocation,omitempty"`
	Location         *Location         `protobuf:"bytes,13,opt,name=location" json:"location,omitempty"`
	FirmwareVersions *FirmwareVersions `protobuf:"bytes,14,opt,name=firmwareVersions" json:"firmwareVersions,omitempty"`
	DeviceIcons      *DeviceIcons      `protobuf:"bytes,15,opt,name=deviceIcons" json:"deviceIcons,omitempty"`
	Extra            *any.Any          `protobuf:"bytes,16,opt,name=extra" json:"extra,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_partner_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_partner_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceInfo) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetTslId() string {
	if x != nil && x.TslId != nil {
		return *x.TslId
	}
	return ""
}

func (x *DeviceInfo) GetDeviceType() DeviceType {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_UNKNOWN
}

func (x *DeviceInfo) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

func (x *DeviceInfo) GetManufacturerId() string {
	if x != nil && x.ManufacturerId != nil {
		return *x.ManufacturerId
	}
	return ""
}

func (x *DeviceInfo) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *DeviceInfo) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *DeviceInfo) GetSerialNo() string {
	if x != nil && x.SerialNo != nil {
		return *x.SerialNo
	}
	return ""
}

func (x *DeviceInfo) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *DeviceInfo) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *DeviceInfo) GetGeolocation() *Geolocation {
	if x != nil {
		return x.Geolocation
	}
	return nil
}

func (x *DeviceInfo) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DeviceInfo) GetFirmwareVersions() *FirmwareVersions {
	if x != nil {
		return x.FirmwareVersions
	}
	return nil
}

func (x *DeviceInfo) GetDeviceIcons() *DeviceIcons {
	if x != nil {
		return x.DeviceIcons
	}
	return nil
}

func (x *DeviceInfo) GetExtra() *any.Any {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DeviceReachAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  *string                  `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	Value     *DeviceReachAbilityValue `protobuf:"varint,2,req,name=value,enum=protocol.common.partner.DeviceReachAbilityValue" json:"value,omitempty"`
	Timestamp *string                  `protobuf:"bytes,3,req,name=timestamp" json:"timestamp,omitempty"`
}

func (x *DeviceReachAbility) Reset() {
	*x = DeviceReachAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_partner_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceReachAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceReachAbility) ProtoMessage() {}

func (x *DeviceReachAbility) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_partner_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceReachAbility.ProtoReflect.Descriptor instead.
func (*DeviceReachAbility) Descriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceReachAbility) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *DeviceReachAbility) GetValue() DeviceReachAbilityValue {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return DeviceReachAbilityValue_DEVICE_REACH_ABILITY_VALUE_UNKNOWN
}

func (x *DeviceReachAbility) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId     *string              `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	DeviceInfo   *DeviceInfo          `protobuf:"bytes,2,req,name=deviceInfo" json:"deviceInfo,omitempty"`
	ReachAbility *DeviceReachAbility  `protobuf:"bytes,3,opt,name=reachAbility" json:"reachAbility,omitempty"`
	Properties   []*tsl.TSLCapability `protobuf:"bytes,4,rep,name=properties" json:"properties,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_partner_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_partner_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_protocol_common_partner_device_proto_rawDescGZIP(), []int{8}
}

func (x *Device) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *Device) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *Device) GetReachAbility() *DeviceReachAbility {
	if x != nil {
		return x.ReachAbility
	}
	return nil
}

func (x *Device) GetProperties() []*tsl.TSLCapability {
	if x != nil {
		return x.Properties
	}
	return nil
}

var File_protocol_common_partner_device_proto protoreflect.FileDescriptor

var file_protocol_common_partner_device_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x73, 0x6c, 0x2f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x13, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x0b, 0x47, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x22, 0x34, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x22, 0x44, 0x0a, 0x10, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x69,
	0x66, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x69, 0x66, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63,
	0x75, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x63, 0x75, 0x22, 0x35, 0x0a, 0x0b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x70, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x70, 0x33, 0x32, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x70, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x70, 0x36, 0x34, 0x22, 0xe0, 0x05, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x73, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x73, 0x6c, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x45, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xfe, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0c, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x74, 0x73, 0x6c, 0x2e, 0x54, 0x53, 0x4c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x2a, 0xf1, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x10, 0x07, 0x2a, 0xd4, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x5a, 0x49, 0x47, 0x5f, 0x42, 0x45, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x5f, 0x57,
	0x41, 0x56, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x41, 0x10, 0x05, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x42, 0x5f, 0x49, 0x4f, 0x54, 0x10, 0x06, 0x2a, 0x90, 0x01, 0x0a, 0x17,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x42, 0x3e,
	0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x63, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5a,
	0x1d, 0x74, 0x63, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x61, 0x69, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
}

var (
	file_protocol_common_partner_device_proto_rawDescOnce sync.Once
	file_protocol_common_partner_device_proto_rawDescData = file_protocol_common_partner_device_proto_rawDesc
)

func file_protocol_common_partner_device_proto_rawDescGZIP() []byte {
	file_protocol_common_partner_device_proto_rawDescOnce.Do(func() {
		file_protocol_common_partner_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_common_partner_device_proto_rawDescData)
	})
	return file_protocol_common_partner_device_proto_rawDescData
}

var file_protocol_common_partner_device_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protocol_common_partner_device_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_protocol_common_partner_device_proto_goTypes = []interface{}{
	(DeviceType)(0),              // 0: protocol.common.partner.DeviceType
	(ConnectionType)(0),          // 1: protocol.common.partner.ConnectionType
	(DeviceReachAbilityValue)(0), // 2: protocol.common.partner.DeviceReachAbilityValue
	(*ConnectionAddress)(nil),    // 3: protocol.common.partner.ConnectionAddress
	(*Connection)(nil),           // 4: protocol.common.partner.Connection
	(*Geolocation)(nil),          // 5: protocol.common.partner.Geolocation
	(*Location)(nil),             // 6: protocol.common.partner.Location
	(*FirmwareVersions)(nil),     // 7: protocol.common.partner.FirmwareVersions
	(*DeviceIcons)(nil),          // 8: protocol.common.partner.DeviceIcons
	(*DeviceInfo)(nil),           // 9: protocol.common.partner.DeviceInfo
	(*DeviceReachAbility)(nil),   // 10: protocol.common.partner.DeviceReachAbility
	(*Device)(nil),               // 11: protocol.common.partner.Device
	(*any.Any)(nil),              // 12: google.protobuf.Any
	(*tsl.TSLCapability)(nil),    // 13: protocol.common.tsl.TSLCapability
}
var file_protocol_common_partner_device_proto_depIdxs = []int32{
	1,  // 0: protocol.common.partner.Connection.type:type_name -> protocol.common.partner.ConnectionType
	3,  // 1: protocol.common.partner.Connection.address:type_name -> protocol.common.partner.ConnectionAddress
	0,  // 2: protocol.common.partner.DeviceInfo.deviceType:type_name -> protocol.common.partner.DeviceType
	4,  // 3: protocol.common.partner.DeviceInfo.Connections:type_name -> protocol.common.partner.Connection
	5,  // 4: protocol.common.partner.DeviceInfo.geolocation:type_name -> protocol.common.partner.Geolocation
	6,  // 5: protocol.common.partner.DeviceInfo.location:type_name -> protocol.common.partner.Location
	7,  // 6: protocol.common.partner.DeviceInfo.firmwareVersions:type_name -> protocol.common.partner.FirmwareVersions
	8,  // 7: protocol.common.partner.DeviceInfo.deviceIcons:type_name -> protocol.common.partner.DeviceIcons
	12, // 8: protocol.common.partner.DeviceInfo.extra:type_name -> google.protobuf.Any
	2,  // 9: protocol.common.partner.DeviceReachAbility.value:type_name -> protocol.common.partner.DeviceReachAbilityValue
	9,  // 10: protocol.common.partner.Device.deviceInfo:type_name -> protocol.common.partner.DeviceInfo
	10, // 11: protocol.common.partner.Device.reachAbility:type_name -> protocol.common.partner.DeviceReachAbility
	13, // 12: protocol.common.partner.Device.properties:type_name -> protocol.common.tsl.TSLCapability
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_protocol_common_partner_device_proto_init() }
func file_protocol_common_partner_device_proto_init() {
	if File_protocol_common_partner_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_common_partner_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_partner_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_partner_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geolocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_partner_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_partner_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_partner_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIcons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_partner_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_partner_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceReachAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_partner_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_common_partner_device_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_common_partner_device_proto_goTypes,
		DependencyIndexes: file_protocol_common_partner_device_proto_depIdxs,
		EnumInfos:         file_protocol_common_partner_device_proto_enumTypes,
		MessageInfos:      file_protocol_common_partner_device_proto_msgTypes,
	}.Build()
	File_protocol_common_partner_device_proto = out.File
	file_protocol_common_partner_device_proto_rawDesc = nil
	file_protocol_common_partner_device_proto_goTypes = nil
	file_protocol_common_partner_device_proto_depIdxs = nil
}
