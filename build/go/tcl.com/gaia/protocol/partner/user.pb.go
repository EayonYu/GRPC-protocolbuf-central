// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/common/partner/user.proto

package partner // import "tcl.com/gaia/protocol/partner"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// https://confluence.tclking.com/display/IoT4/Partner+API+Common+Objects#PartnerAPICommonObjects-User
type AccountSystemId int32

const (
	AccountSystemId_TCL_SSO         AccountSystemId = 0
	AccountSystemId_WE_CHAT_OPEN_ID AccountSystemId = 1
	AccountSystemId_MOBILE_PHONE    AccountSystemId = 2
)

var AccountSystemId_name = map[int32]string{
	0: "TCL_SSO",
	1: "WE_CHAT_OPEN_ID",
	2: "MOBILE_PHONE",
}
var AccountSystemId_value = map[string]int32{
	"TCL_SSO":         0,
	"WE_CHAT_OPEN_ID": 1,
	"MOBILE_PHONE":    2,
}

func (x AccountSystemId) Enum() *AccountSystemId {
	p := new(AccountSystemId)
	*p = x
	return p
}
func (x AccountSystemId) String() string {
	return proto.EnumName(AccountSystemId_name, int32(x))
}
func (x *AccountSystemId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AccountSystemId_value, data, "AccountSystemId")
	if err != nil {
		return err
	}
	*x = AccountSystemId(value)
	return nil
}
func (AccountSystemId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_user_3c0875b735578d73, []int{0}
}

type LoginDetails struct {
	AccountSystemId      *AccountSystemId `protobuf:"varint,1,req,name=accountSystemId,enum=protocol.common.partner.AccountSystemId" json:"accountSystemId,omitempty"`
	LoginAccountId       *string          `protobuf:"bytes,2,req,name=loginAccountId" json:"loginAccountId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LoginDetails) Reset()         { *m = LoginDetails{} }
func (m *LoginDetails) String() string { return proto.CompactTextString(m) }
func (*LoginDetails) ProtoMessage()    {}
func (*LoginDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_3c0875b735578d73, []int{0}
}
func (m *LoginDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginDetails.Unmarshal(m, b)
}
func (m *LoginDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginDetails.Marshal(b, m, deterministic)
}
func (dst *LoginDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginDetails.Merge(dst, src)
}
func (m *LoginDetails) XXX_Size() int {
	return xxx_messageInfo_LoginDetails.Size(m)
}
func (m *LoginDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginDetails.DiscardUnknown(m)
}

var xxx_messageInfo_LoginDetails proto.InternalMessageInfo

func (m *LoginDetails) GetAccountSystemId() AccountSystemId {
	if m != nil && m.AccountSystemId != nil {
		return *m.AccountSystemId
	}
	return AccountSystemId_TCL_SSO
}

func (m *LoginDetails) GetLoginAccountId() string {
	if m != nil && m.LoginAccountId != nil {
		return *m.LoginAccountId
	}
	return ""
}

type User struct {
	UserId               *string         `protobuf:"bytes,1,req,name=userId" json:"userId,omitempty"`
	TenantId             *string         `protobuf:"bytes,2,opt,name=tenantId" json:"tenantId,omitempty"`
	ImmutableIdentity    *string         `protobuf:"bytes,3,opt,name=immutableIdentity" json:"immutableIdentity,omitempty"`
	UserName             *string         `protobuf:"bytes,4,opt,name=userName" json:"userName,omitempty"`
	LoginDetails         []*LoginDetails `protobuf:"bytes,5,rep,name=loginDetails" json:"loginDetails,omitempty"`
	Extra                *any.Any        `protobuf:"bytes,6,opt,name=extra" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_3c0875b735578d73, []int{1}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *User) GetTenantId() string {
	if m != nil && m.TenantId != nil {
		return *m.TenantId
	}
	return ""
}

func (m *User) GetImmutableIdentity() string {
	if m != nil && m.ImmutableIdentity != nil {
		return *m.ImmutableIdentity
	}
	return ""
}

func (m *User) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *User) GetLoginDetails() []*LoginDetails {
	if m != nil {
		return m.LoginDetails
	}
	return nil
}

func (m *User) GetExtra() *any.Any {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*LoginDetails)(nil), "protocol.common.partner.LoginDetails")
	proto.RegisterType((*User)(nil), "protocol.common.partner.User")
	proto.RegisterEnum("protocol.common.partner.AccountSystemId", AccountSystemId_name, AccountSystemId_value)
}

func init() {
	proto.RegisterFile("protocol/common/partner/user.proto", fileDescriptor_user_3c0875b735578d73)
}

var fileDescriptor_user_3c0875b735578d73 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdb, 0x6a, 0xc2, 0x30,
	0x18, 0xc7, 0xd7, 0x7a, 0xd8, 0x8c, 0xa2, 0x5d, 0x36, 0xb6, 0x4e, 0x10, 0x8a, 0xb0, 0x51, 0x64,
	0xa4, 0xe0, 0x03, 0x0c, 0x3c, 0x14, 0x2c, 0x38, 0x2b, 0xd5, 0x31, 0xd8, 0x4d, 0x89, 0x35, 0x2b,
	0x85, 0x26, 0x91, 0x36, 0x85, 0xf5, 0x15, 0xf6, 0xca, 0xbb, 0x19, 0xb5, 0xd5, 0xa9, 0xc3, 0xcb,
	0x2f, 0xff, 0xdf, 0xf7, 0xff, 0x4e, 0x01, 0xdd, 0x4d, 0xc4, 0x05, 0xf7, 0x78, 0x68, 0x78, 0x9c,
	0x52, 0xce, 0x8c, 0x0d, 0x8e, 0x04, 0x23, 0x91, 0x91, 0xc4, 0x24, 0x42, 0x5b, 0x11, 0xde, 0xef,
	0x18, 0x94, 0x33, 0xa8, 0x60, 0xda, 0x0f, 0x3e, 0xe7, 0x7e, 0x48, 0x8c, 0xad, 0xbe, 0x4a, 0x3e,
	0x0d, 0xcc, 0xd2, 0x3c, 0xa7, 0xfb, 0x2d, 0x81, 0xc6, 0x94, 0xfb, 0x01, 0x1b, 0x13, 0x81, 0x83,
	0x30, 0x86, 0x0e, 0x68, 0x61, 0xcf, 0xe3, 0x09, 0x13, 0x8b, 0x34, 0x16, 0x84, 0x5a, 0x6b, 0x55,
	0xd2, 0x64, 0xbd, 0xd9, 0xd7, 0xd1, 0x19, 0x7b, 0x34, 0x38, 0xe6, 0x9d, 0x53, 0x03, 0xf8, 0x04,
	0x9a, 0x61, 0x56, 0xa3, 0x00, 0xad, 0xb5, 0x2a, 0x6b, 0xb2, 0x5e, 0x73, 0x4e, 0x5e, 0xbb, 0x3f,
	0x12, 0x28, 0xbf, 0xc5, 0x24, 0x82, 0x77, 0xa0, 0x9a, 0xcd, 0x55, 0xd4, 0xae, 0x39, 0x45, 0x04,
	0xdb, 0xe0, 0x4a, 0x10, 0x86, 0x0b, 0x0b, 0x49, 0xaf, 0x39, 0xfb, 0x18, 0x3e, 0x83, 0xeb, 0x80,
	0xd2, 0x44, 0xe0, 0x55, 0x48, 0xac, 0x35, 0x61, 0x22, 0x10, 0xa9, 0x5a, 0xda, 0x42, 0xff, 0x85,
	0xcc, 0x29, 0xf3, 0x9c, 0x61, 0x4a, 0xd4, 0x72, 0xee, 0xb4, 0x8b, 0xa1, 0x05, 0x1a, 0xe1, 0xc1,
	0x4a, 0xd4, 0x8a, 0x56, 0xd2, 0xeb, 0xfd, 0xc7, 0xb3, 0xf3, 0x1f, 0xee, 0xcf, 0x39, 0x4a, 0x85,
	0x3d, 0x50, 0x21, 0x5f, 0x22, 0xc2, 0x6a, 0x55, 0x93, 0xf4, 0x7a, 0xff, 0x16, 0xe5, 0x97, 0x40,
	0xbb, 0x4b, 0xa0, 0x01, 0x4b, 0x9d, 0x1c, 0xe9, 0x99, 0xa0, 0x75, 0xb2, 0x49, 0x58, 0x07, 0x97,
	0xcb, 0xd1, 0xd4, 0x5d, 0x2c, 0x6c, 0xe5, 0x02, 0xde, 0x80, 0xd6, 0xbb, 0xe9, 0x8e, 0x26, 0x83,
	0xa5, 0x6b, 0xcf, 0xcd, 0x99, 0x6b, 0x8d, 0x15, 0x09, 0x2a, 0xa0, 0xf1, 0x6a, 0x0f, 0xad, 0xa9,
	0xe9, 0xce, 0x27, 0xf6, 0xcc, 0x54, 0xe4, 0xe1, 0x0b, 0xe8, 0x78, 0x9c, 0x22, 0xe1, 0x85, 0xc8,
	0xc7, 0x01, 0xfe, 0xeb, 0xba, 0x68, 0xf7, 0xa3, 0x93, 0x49, 0x1e, 0xa7, 0x46, 0x26, 0x1b, 0xfb,
	0x7f, 0x55, 0xc8, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x7b, 0x80, 0xe8, 0x6a, 0x02, 0x00,
	0x00,
}
