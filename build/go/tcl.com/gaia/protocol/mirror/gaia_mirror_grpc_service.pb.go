// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: protocol/gaia/mirror/gaia_mirror_grpc_service.proto

package mirror

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDescGZIP(), []int{0}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong *bool `protobuf:"varint,1,opt,name=pong" json:"pong,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetPong() bool {
	if x != nil && x.Pong != nil {
		return *x.Pong
	}
	return false
}

var File_protocol_gaia_mirror_gaia_mirror_grpc_service_proto protoreflect.FileDescriptor

var file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDesc = []byte{
	0x0a, 0x33, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x61, 0x69, 0x61, 0x2f,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2f, 0x67, 0x61, 0x69, 0x61, 0x5f, 0x6d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x61, 0x69, 0x61, 0x2f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x61, 0x69, 0x61, 0x2f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a,
	0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x0c,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x32, 0xf3, 0x08, 0x0a, 0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67,
	0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2f, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x79, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x6d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x6d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x6d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x12, 0x2c, 0x2f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xb5,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x63,
	0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5a, 0x1c, 0x74, 0x63, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x61, 0x69, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01,
}

var (
	file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDescOnce sync.Once
	file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDescData = file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDesc
)

func file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDescGZIP() []byte {
	file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDescOnce.Do(func() {
		file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDescData)
	})
	return file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDescData
}

var file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_goTypes = []interface{}{
	(*PingRequest)(nil),                     // 0: protocol.gaia.mirror.PingRequest
	(*PingResponse)(nil),                    // 1: protocol.gaia.mirror.PingResponse
	(*GetUserListRequest)(nil),              // 2: protocol.gaia.mirror.GetUserListRequest
	(*GetDevicesByPartnerUserRequest)(nil),  // 3: protocol.gaia.mirror.GetDevicesByPartnerUserRequest
	(*GetPartnerDevicesByIdsRequest)(nil),   // 4: protocol.gaia.mirror.GetPartnerDevicesByIdsRequest
	(*GetUsersRangeRequest)(nil),            // 5: protocol.gaia.mirror.GetUsersRangeRequest
	(*GetDevicesRangeRequest)(nil),          // 6: protocol.gaia.mirror.GetDevicesRangeRequest
	(*GetUserDevicesRangeRequest)(nil),      // 7: protocol.gaia.mirror.GetUserDevicesRangeRequest
	(*GetUserListResponse)(nil),             // 8: protocol.gaia.mirror.GetUserListResponse
	(*GetDevicesByPartnerUserResponse)(nil), // 9: protocol.gaia.mirror.GetDevicesByPartnerUserResponse
	(*GetPartnerDevicesByIdsResponse)(nil),  // 10: protocol.gaia.mirror.GetPartnerDevicesByIdsResponse
	(*GetUsersRangeResponse)(nil),           // 11: protocol.gaia.mirror.GetUsersRangeResponse
	(*GetDevicesRangeResponse)(nil),         // 12: protocol.gaia.mirror.GetDevicesRangeResponse
	(*GetUserDevicesRangeResponse)(nil),     // 13: protocol.gaia.mirror.GetUserDevicesRangeResponse
}
var file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_depIdxs = []int32{
	0,  // 0: protocol.gaia.mirror.Mirror.Ping:input_type -> protocol.gaia.mirror.PingRequest
	2,  // 1: protocol.gaia.mirror.Mirror.GetUserList:input_type -> protocol.gaia.mirror.GetUserListRequest
	3,  // 2: protocol.gaia.mirror.Mirror.GetDevicesByPartnerUser:input_type -> protocol.gaia.mirror.GetDevicesByPartnerUserRequest
	4,  // 3: protocol.gaia.mirror.Mirror.GetPartnerDevicesByIds:input_type -> protocol.gaia.mirror.GetPartnerDevicesByIdsRequest
	5,  // 4: protocol.gaia.mirror.Mirror.GetUsersRange:input_type -> protocol.gaia.mirror.GetUsersRangeRequest
	6,  // 5: protocol.gaia.mirror.Mirror.GetDevicesRange:input_type -> protocol.gaia.mirror.GetDevicesRangeRequest
	7,  // 6: protocol.gaia.mirror.Mirror.GetUserDevicesRange:input_type -> protocol.gaia.mirror.GetUserDevicesRangeRequest
	1,  // 7: protocol.gaia.mirror.Mirror.Ping:output_type -> protocol.gaia.mirror.PingResponse
	8,  // 8: protocol.gaia.mirror.Mirror.GetUserList:output_type -> protocol.gaia.mirror.GetUserListResponse
	9,  // 9: protocol.gaia.mirror.Mirror.GetDevicesByPartnerUser:output_type -> protocol.gaia.mirror.GetDevicesByPartnerUserResponse
	10, // 10: protocol.gaia.mirror.Mirror.GetPartnerDevicesByIds:output_type -> protocol.gaia.mirror.GetPartnerDevicesByIdsResponse
	11, // 11: protocol.gaia.mirror.Mirror.GetUsersRange:output_type -> protocol.gaia.mirror.GetUsersRangeResponse
	12, // 12: protocol.gaia.mirror.Mirror.GetDevicesRange:output_type -> protocol.gaia.mirror.GetDevicesRangeResponse
	13, // 13: protocol.gaia.mirror.Mirror.GetUserDevicesRange:output_type -> protocol.gaia.mirror.GetUserDevicesRangeResponse
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_init() }
func file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_init() {
	if File_protocol_gaia_mirror_gaia_mirror_grpc_service_proto != nil {
		return
	}
	file_protocol_gaia_mirror_user_proto_init()
	file_protocol_gaia_mirror_device_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_goTypes,
		DependencyIndexes: file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_depIdxs,
		MessageInfos:      file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_msgTypes,
	}.Build()
	File_protocol_gaia_mirror_gaia_mirror_grpc_service_proto = out.File
	file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_rawDesc = nil
	file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_goTypes = nil
	file_protocol_gaia_mirror_gaia_mirror_grpc_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MirrorClient is the client API for Mirror service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MirrorClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error)
	GetDevicesByPartnerUser(ctx context.Context, in *GetDevicesByPartnerUserRequest, opts ...grpc.CallOption) (*GetDevicesByPartnerUserResponse, error)
	GetPartnerDevicesByIds(ctx context.Context, in *GetPartnerDevicesByIdsRequest, opts ...grpc.CallOption) (*GetPartnerDevicesByIdsResponse, error)
	GetUsersRange(ctx context.Context, in *GetUsersRangeRequest, opts ...grpc.CallOption) (*GetUsersRangeResponse, error)
	GetDevicesRange(ctx context.Context, in *GetDevicesRangeRequest, opts ...grpc.CallOption) (*GetDevicesRangeResponse, error)
	GetUserDevicesRange(ctx context.Context, in *GetUserDevicesRangeRequest, opts ...grpc.CallOption) (*GetUserDevicesRangeResponse, error)
}

type mirrorClient struct {
	cc grpc.ClientConnInterface
}

func NewMirrorClient(cc grpc.ClientConnInterface) MirrorClient {
	return &mirrorClient{cc}
}

func (c *mirrorClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error) {
	out := new(GetUserListResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetDevicesByPartnerUser(ctx context.Context, in *GetDevicesByPartnerUserRequest, opts ...grpc.CallOption) (*GetDevicesByPartnerUserResponse, error) {
	out := new(GetDevicesByPartnerUserResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetDevicesByPartnerUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetPartnerDevicesByIds(ctx context.Context, in *GetPartnerDevicesByIdsRequest, opts ...grpc.CallOption) (*GetPartnerDevicesByIdsResponse, error) {
	out := new(GetPartnerDevicesByIdsResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetPartnerDevicesByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetUsersRange(ctx context.Context, in *GetUsersRangeRequest, opts ...grpc.CallOption) (*GetUsersRangeResponse, error) {
	out := new(GetUsersRangeResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetUsersRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetDevicesRange(ctx context.Context, in *GetDevicesRangeRequest, opts ...grpc.CallOption) (*GetDevicesRangeResponse, error) {
	out := new(GetDevicesRangeResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetDevicesRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetUserDevicesRange(ctx context.Context, in *GetUserDevicesRangeRequest, opts ...grpc.CallOption) (*GetUserDevicesRangeResponse, error) {
	out := new(GetUserDevicesRangeResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetUserDevicesRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MirrorServer is the server API for Mirror service.
type MirrorServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error)
	GetDevicesByPartnerUser(context.Context, *GetDevicesByPartnerUserRequest) (*GetDevicesByPartnerUserResponse, error)
	GetPartnerDevicesByIds(context.Context, *GetPartnerDevicesByIdsRequest) (*GetPartnerDevicesByIdsResponse, error)
	GetUsersRange(context.Context, *GetUsersRangeRequest) (*GetUsersRangeResponse, error)
	GetDevicesRange(context.Context, *GetDevicesRangeRequest) (*GetDevicesRangeResponse, error)
	GetUserDevicesRange(context.Context, *GetUserDevicesRangeRequest) (*GetUserDevicesRangeResponse, error)
}

// UnimplementedMirrorServer can be embedded to have forward compatible implementations.
type UnimplementedMirrorServer struct {
}

func (*UnimplementedMirrorServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedMirrorServer) GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (*UnimplementedMirrorServer) GetDevicesByPartnerUser(context.Context, *GetDevicesByPartnerUserRequest) (*GetDevicesByPartnerUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesByPartnerUser not implemented")
}
func (*UnimplementedMirrorServer) GetPartnerDevicesByIds(context.Context, *GetPartnerDevicesByIdsRequest) (*GetPartnerDevicesByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerDevicesByIds not implemented")
}
func (*UnimplementedMirrorServer) GetUsersRange(context.Context, *GetUsersRangeRequest) (*GetUsersRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersRange not implemented")
}
func (*UnimplementedMirrorServer) GetDevicesRange(context.Context, *GetDevicesRangeRequest) (*GetDevicesRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesRange not implemented")
}
func (*UnimplementedMirrorServer) GetUserDevicesRange(context.Context, *GetUserDevicesRangeRequest) (*GetUserDevicesRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDevicesRange not implemented")
}

func RegisterMirrorServer(s *grpc.Server, srv MirrorServer) {
	s.RegisterService(&_Mirror_serviceDesc, srv)
}

func _Mirror_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetUserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetDevicesByPartnerUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesByPartnerUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetDevicesByPartnerUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetDevicesByPartnerUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetDevicesByPartnerUser(ctx, req.(*GetDevicesByPartnerUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetPartnerDevicesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerDevicesByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetPartnerDevicesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetPartnerDevicesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetPartnerDevicesByIds(ctx, req.(*GetPartnerDevicesByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetUsersRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetUsersRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetUsersRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetUsersRange(ctx, req.(*GetUsersRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetDevicesRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetDevicesRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetDevicesRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetDevicesRange(ctx, req.(*GetDevicesRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetUserDevicesRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDevicesRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetUserDevicesRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetUserDevicesRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetUserDevicesRange(ctx, req.(*GetUserDevicesRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mirror_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.gaia.mirror.Mirror",
	HandlerType: (*MirrorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Mirror_Ping_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _Mirror_GetUserList_Handler,
		},
		{
			MethodName: "GetDevicesByPartnerUser",
			Handler:    _Mirror_GetDevicesByPartnerUser_Handler,
		},
		{
			MethodName: "GetPartnerDevicesByIds",
			Handler:    _Mirror_GetPartnerDevicesByIds_Handler,
		},
		{
			MethodName: "GetUsersRange",
			Handler:    _Mirror_GetUsersRange_Handler,
		},
		{
			MethodName: "GetDevicesRange",
			Handler:    _Mirror_GetDevicesRange_Handler,
		},
		{
			MethodName: "GetUserDevicesRange",
			Handler:    _Mirror_GetUserDevicesRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/gaia/mirror/gaia_mirror_grpc_service.proto",
}
