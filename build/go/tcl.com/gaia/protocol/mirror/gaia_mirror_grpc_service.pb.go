// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/gaia/mirror/gaia_mirror_grpc_service.proto

package mirror // import "tcl.com/gaia/protocol/mirror"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gaia_mirror_grpc_service_a7a2b064f60a69a1, []int{0}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (dst *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(dst, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

type PingResponse struct {
	Pong                 *bool    `protobuf:"varint,1,opt,name=pong" json:"pong,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_gaia_mirror_grpc_service_a7a2b064f60a69a1, []int{1}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (dst *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(dst, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetPong() bool {
	if m != nil && m.Pong != nil {
		return *m.Pong
	}
	return false
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "protocol.gaia.mirror.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "protocol.gaia.mirror.PingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MirrorClient is the client API for Mirror service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MirrorClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error)
	GetDevicesByPartnerUser(ctx context.Context, in *GetDevicesByPartnerUserRequest, opts ...grpc.CallOption) (*GetDevicesByPartnerUserResponse, error)
	GetPartnerDevicesByIds(ctx context.Context, in *GetPartnerDevicesByIdsRequest, opts ...grpc.CallOption) (*GetPartnerDevicesByIdsResponse, error)
	GetUsersRange(ctx context.Context, in *GetUsersRangeRequest, opts ...grpc.CallOption) (*GetUsersRangeResponse, error)
	GetDevicesRange(ctx context.Context, in *GetDevicesRangeRequest, opts ...grpc.CallOption) (*GetDevicesRangeResponse, error)
	GetUserDevicesRange(ctx context.Context, in *GetUserDevicesRangeRequest, opts ...grpc.CallOption) (*GetUserDevicesRangeResponse, error)
}

type mirrorClient struct {
	cc *grpc.ClientConn
}

func NewMirrorClient(cc *grpc.ClientConn) MirrorClient {
	return &mirrorClient{cc}
}

func (c *mirrorClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error) {
	out := new(GetUserListResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetDevicesByPartnerUser(ctx context.Context, in *GetDevicesByPartnerUserRequest, opts ...grpc.CallOption) (*GetDevicesByPartnerUserResponse, error) {
	out := new(GetDevicesByPartnerUserResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetDevicesByPartnerUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetPartnerDevicesByIds(ctx context.Context, in *GetPartnerDevicesByIdsRequest, opts ...grpc.CallOption) (*GetPartnerDevicesByIdsResponse, error) {
	out := new(GetPartnerDevicesByIdsResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetPartnerDevicesByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetUsersRange(ctx context.Context, in *GetUsersRangeRequest, opts ...grpc.CallOption) (*GetUsersRangeResponse, error) {
	out := new(GetUsersRangeResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetUsersRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetDevicesRange(ctx context.Context, in *GetDevicesRangeRequest, opts ...grpc.CallOption) (*GetDevicesRangeResponse, error) {
	out := new(GetDevicesRangeResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetDevicesRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetUserDevicesRange(ctx context.Context, in *GetUserDevicesRangeRequest, opts ...grpc.CallOption) (*GetUserDevicesRangeResponse, error) {
	out := new(GetUserDevicesRangeResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.mirror.Mirror/GetUserDevicesRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MirrorServer is the server API for Mirror service.
type MirrorServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error)
	GetDevicesByPartnerUser(context.Context, *GetDevicesByPartnerUserRequest) (*GetDevicesByPartnerUserResponse, error)
	GetPartnerDevicesByIds(context.Context, *GetPartnerDevicesByIdsRequest) (*GetPartnerDevicesByIdsResponse, error)
	GetUsersRange(context.Context, *GetUsersRangeRequest) (*GetUsersRangeResponse, error)
	GetDevicesRange(context.Context, *GetDevicesRangeRequest) (*GetDevicesRangeResponse, error)
	GetUserDevicesRange(context.Context, *GetUserDevicesRangeRequest) (*GetUserDevicesRangeResponse, error)
}

func RegisterMirrorServer(s *grpc.Server, srv MirrorServer) {
	s.RegisterService(&_Mirror_serviceDesc, srv)
}

func _Mirror_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetUserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetDevicesByPartnerUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesByPartnerUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetDevicesByPartnerUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetDevicesByPartnerUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetDevicesByPartnerUser(ctx, req.(*GetDevicesByPartnerUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetPartnerDevicesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerDevicesByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetPartnerDevicesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetPartnerDevicesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetPartnerDevicesByIds(ctx, req.(*GetPartnerDevicesByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetUsersRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetUsersRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetUsersRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetUsersRange(ctx, req.(*GetUsersRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetDevicesRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetDevicesRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetDevicesRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetDevicesRange(ctx, req.(*GetDevicesRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetUserDevicesRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDevicesRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetUserDevicesRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.mirror.Mirror/GetUserDevicesRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetUserDevicesRange(ctx, req.(*GetUserDevicesRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mirror_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.gaia.mirror.Mirror",
	HandlerType: (*MirrorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Mirror_Ping_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _Mirror_GetUserList_Handler,
		},
		{
			MethodName: "GetDevicesByPartnerUser",
			Handler:    _Mirror_GetDevicesByPartnerUser_Handler,
		},
		{
			MethodName: "GetPartnerDevicesByIds",
			Handler:    _Mirror_GetPartnerDevicesByIds_Handler,
		},
		{
			MethodName: "GetUsersRange",
			Handler:    _Mirror_GetUsersRange_Handler,
		},
		{
			MethodName: "GetDevicesRange",
			Handler:    _Mirror_GetDevicesRange_Handler,
		},
		{
			MethodName: "GetUserDevicesRange",
			Handler:    _Mirror_GetUserDevicesRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/gaia/mirror/gaia_mirror_grpc_service.proto",
}

func init() {
	proto.RegisterFile("protocol/gaia/mirror/gaia_mirror_grpc_service.proto", fileDescriptor_gaia_mirror_grpc_service_a7a2b064f60a69a1)
}

var fileDescriptor_gaia_mirror_grpc_service_a7a2b064f60a69a1 = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x19, 0x29, 0x52, 0xa6, 0x5d, 0x0b, 0xaf, 0xf5, 0x0f, 0xcb, 0x82, 0x36, 0xa7, 0x5a,
	0xb7, 0x89, 0xed, 0x6e, 0x0f, 0x1e, 0xa4, 0x50, 0x94, 0x45, 0x50, 0x28, 0x0b, 0x5e, 0xbc, 0x0c,
	0x31, 0x19, 0xc2, 0x40, 0x77, 0x26, 0xce, 0x3b, 0x11, 0x16, 0xf1, 0xe2, 0xc9, 0xbb, 0x57, 0x8f,
	0x7e, 0x05, 0x2f, 0x7e, 0x07, 0x4f, 0x7e, 0x05, 0xbf, 0x81, 0x5f, 0xa0, 0x64, 0x66, 0x92, 0x66,
	0x21, 0xbb, 0x9b, 0xbd, 0xbd, 0x49, 0x9e, 0xf7, 0x7d, 0x7e, 0xef, 0xf3, 0x42, 0xe8, 0x28, 0xd7,
	0xca, 0xa8, 0x44, 0x5d, 0x45, 0x59, 0x2c, 0xe2, 0x68, 0x26, 0xb4, 0x56, 0xda, 0xd6, 0xcc, 0xd5,
	0x2c, 0xd3, 0x79, 0xc2, 0x90, 0xeb, 0x4f, 0x22, 0xe1, 0xa1, 0x55, 0xc3, 0x7e, 0xd5, 0x14, 0x96,
	0xc2, 0xd0, 0x09, 0xfb, 0x83, 0x4c, 0xa9, 0xec, 0x8a, 0x47, 0x71, 0x2e, 0xa2, 0x58, 0x4a, 0x65,
	0x62, 0x23, 0x94, 0x44, 0xd7, 0xd3, 0x7f, 0xd4, 0x6a, 0x54, 0x20, 0xd7, 0x5e, 0x70, 0xd0, 0x2a,
	0x48, 0xf9, 0x8d, 0x6f, 0xd0, 0xa3, 0x3b, 0x97, 0x42, 0x66, 0x53, 0xfe, 0xb1, 0xe0, 0x68, 0x82,
	0x80, 0xee, 0xba, 0x47, 0xcc, 0x95, 0x44, 0x0e, 0x40, 0xb7, 0x72, 0x25, 0xb3, 0x87, 0xe4, 0x31,
	0x39, 0xdc, 0x9e, 0xda, 0xfa, 0xf4, 0xff, 0x36, 0xbd, 0xfd, 0xd6, 0x8e, 0x82, 0x84, 0x6e, 0x95,
	0x72, 0x38, 0x08, 0xdb, 0xf0, 0xc3, 0xc6, 0xe4, 0x7e, 0xb0, 0x4a, 0xe2, 0xdc, 0x82, 0xfd, 0xaf,
	0x7f, 0xff, 0x7d, 0xbf, 0x75, 0x07, 0x76, 0x2b, 0xd4, 0xbc, 0x1c, 0x3e, 0xa7, 0x3b, 0x13, 0x6e,
	0xde, 0x21, 0xd7, 0x6f, 0x04, 0x1a, 0x38, 0x6c, 0x1f, 0xd4, 0x90, 0x54, 0x96, 0x4f, 0x3a, 0x28,
	0xbd, 0xf3, 0x3d, 0xeb, 0xbc, 0x07, 0xbd, 0x66, 0x8a, 0x08, 0x7f, 0x08, 0x7d, 0x30, 0xe1, 0xe6,
	0xa5, 0x4d, 0x0c, 0x2f, 0xe6, 0x97, 0xb1, 0x36, 0x92, 0xeb, 0xb2, 0x1d, 0xc6, 0x4b, 0xa7, 0xb7,
	0xc9, 0x2b, 0xa6, 0xb3, 0x0d, 0xbb, 0x3c, 0xdf, 0x2b, 0xcb, 0x77, 0x0e, 0x2f, 0xea, 0x64, 0x9c,
	0x28, 0xfa, 0xec, 0x0b, 0x56, 0x14, 0x22, 0xfd, 0x62, 0xb1, 0x1b, 0xef, 0x90, 0x6b, 0x56, 0xbe,
	0x76, 0x27, 0x47, 0xf8, 0x4d, 0xe8, 0xfd, 0x09, 0x37, 0xde, 0xa1, 0x76, 0x7c, 0x9d, 0x22, 0x8c,
	0x96, 0x82, 0xb5, 0xa8, 0xab, 0x6d, 0xc6, 0x9b, 0x35, 0xf9, 0x65, 0xce, 0xec, 0x32, 0x11, 0x1c,
	0xaf, 0x59, 0xc6, 0x53, 0xb3, 0x0f, 0x73, 0x26, 0x52, 0x84, 0x1f, 0x84, 0xf6, 0xfc, 0xed, 0x70,
	0x1a, 0xcb, 0x8c, 0xc3, 0xd1, 0xca, 0x03, 0x3b, 0x51, 0x85, 0xfa, 0xb4, 0x93, 0xd6, 0x13, 0x9e,
	0x5a, 0xc2, 0x21, 0x1c, 0x75, 0x88, 0x1b, 0x99, 0xb6, 0x30, 0x3f, 0x09, 0xdd, 0xbb, 0x39, 0xa3,
	0x03, 0x1c, 0xae, 0xbb, 0xf6, 0x02, 0xe2, 0x71, 0x47, 0xb5, 0x87, 0x1c, 0x5b, 0xc8, 0x10, 0x86,
	0x1d, 0x63, 0x74, 0x98, 0xbf, 0x08, 0xbd, 0xeb, 0x97, 0x5e, 0x40, 0x7d, 0xb6, 0x32, 0x9f, 0x36,
	0xdc, 0x93, 0x0d, 0x3a, 0x3c, 0xf2, 0x73, 0x8b, 0x3c, 0x82, 0x93, 0x0e, 0xb9, 0xb2, 0x05, 0xee,
	0x8b, 0x73, 0x3a, 0x48, 0xd4, 0x2c, 0x34, 0x89, 0x77, 0xab, 0xbd, 0xdd, 0xa4, 0xf7, 0x83, 0xf2,
	0x4b, 0xa2, 0x66, 0xee, 0x57, 0x57, 0xff, 0xf8, 0xdc, 0xd7, 0x6f, 0x84, 0x5c, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x5c, 0x3f, 0x01, 0xc9, 0x97, 0x05, 0x00, 0x00,
}
