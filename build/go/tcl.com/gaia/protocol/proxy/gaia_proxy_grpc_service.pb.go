// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/gaia/proxy/gaia_proxy_grpc_service.proto

package proxy // import "tcl.com/gaia/protocol/proxy"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GaiaProxyGrpcClient is the client API for GaiaProxyGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GaiaProxyGrpcClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// partner management
	ListPartner(ctx context.Context, in *ListPartnerRequest, opts ...grpc.CallOption) (*ListPartnerResponse, error)
	GetPartner(ctx context.Context, in *GetPartnerRequest, opts ...grpc.CallOption) (*GetPartnerResponse, error)
	AddPartner(ctx context.Context, in *AddPartnerRequest, opts ...grpc.CallOption) (*AddPartnerResponse, error)
	// proxy
	GetUserChunks(ctx context.Context, in *GetUserChunksRequest, opts ...grpc.CallOption) (*GetUserChunksResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
}

type gaiaProxyGrpcClient struct {
	cc *grpc.ClientConn
}

func NewGaiaProxyGrpcClient(cc *grpc.ClientConn) GaiaProxyGrpcClient {
	return &gaiaProxyGrpcClient{cc}
}

func (c *gaiaProxyGrpcClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaProxyGrpcClient) ListPartner(ctx context.Context, in *ListPartnerRequest, opts ...grpc.CallOption) (*ListPartnerResponse, error) {
	out := new(ListPartnerResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/ListPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaProxyGrpcClient) GetPartner(ctx context.Context, in *GetPartnerRequest, opts ...grpc.CallOption) (*GetPartnerResponse, error) {
	out := new(GetPartnerResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/GetPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaProxyGrpcClient) AddPartner(ctx context.Context, in *AddPartnerRequest, opts ...grpc.CallOption) (*AddPartnerResponse, error) {
	out := new(AddPartnerResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/AddPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaProxyGrpcClient) GetUserChunks(ctx context.Context, in *GetUserChunksRequest, opts ...grpc.CallOption) (*GetUserChunksResponse, error) {
	out := new(GetUserChunksResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/GetUserChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaProxyGrpcClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GaiaProxyGrpcServer is the server API for GaiaProxyGrpc service.
type GaiaProxyGrpcServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// partner management
	ListPartner(context.Context, *ListPartnerRequest) (*ListPartnerResponse, error)
	GetPartner(context.Context, *GetPartnerRequest) (*GetPartnerResponse, error)
	AddPartner(context.Context, *AddPartnerRequest) (*AddPartnerResponse, error)
	// proxy
	GetUserChunks(context.Context, *GetUserChunksRequest) (*GetUserChunksResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
}

func RegisterGaiaProxyGrpcServer(s *grpc.Server, srv GaiaProxyGrpcServer) {
	s.RegisterService(&_GaiaProxyGrpc_serviceDesc, srv)
}

func _GaiaProxyGrpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaProxyGrpc_ListPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).ListPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/ListPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).ListPartner(ctx, req.(*ListPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaProxyGrpc_GetPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).GetPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/GetPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).GetPartner(ctx, req.(*GetPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaProxyGrpc_AddPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).AddPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/AddPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).AddPartner(ctx, req.(*AddPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaProxyGrpc_GetUserChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).GetUserChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/GetUserChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).GetUserChunks(ctx, req.(*GetUserChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaProxyGrpc_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GaiaProxyGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.gaia.proxy.GaiaProxyGrpc",
	HandlerType: (*GaiaProxyGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GaiaProxyGrpc_Ping_Handler,
		},
		{
			MethodName: "ListPartner",
			Handler:    _GaiaProxyGrpc_ListPartner_Handler,
		},
		{
			MethodName: "GetPartner",
			Handler:    _GaiaProxyGrpc_GetPartner_Handler,
		},
		{
			MethodName: "AddPartner",
			Handler:    _GaiaProxyGrpc_AddPartner_Handler,
		},
		{
			MethodName: "GetUserChunks",
			Handler:    _GaiaProxyGrpc_GetUserChunks_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _GaiaProxyGrpc_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/gaia/proxy/gaia_proxy_grpc_service.proto",
}

func init() {
	proto.RegisterFile("protocol/gaia/proxy/gaia_proxy_grpc_service.proto", fileDescriptor_gaia_proxy_grpc_service_27a896c3e46fbf42)
}

var fileDescriptor_gaia_proxy_grpc_service_27a896c3e46fbf42 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x4b, 0xe3, 0x40,
	0x18, 0x86, 0xc9, 0xb2, 0x0b, 0xbb, 0x53, 0xca, 0xee, 0xce, 0xd2, 0x65, 0x49, 0xca, 0xb2, 0x0d,
	0xab, 0xd5, 0x1e, 0x12, 0xf4, 0x28, 0x78, 0x50, 0x0f, 0xb9, 0x78, 0x28, 0x82, 0x17, 0x0f, 0x86,
	0x61, 0x3a, 0xc4, 0xc1, 0x76, 0x26, 0xce, 0x4c, 0xad, 0x22, 0x1e, 0xf4, 0xa4, 0x67, 0x7f, 0x9a,
	0x7f, 0x41, 0xf0, 0x6f, 0xc8, 0x7c, 0x99, 0x34, 0x2d, 0xc4, 0xd4, 0xdb, 0xc0, 0xfb, 0xcc, 0xf7,
	0xbc, 0x5f, 0xc8, 0xa0, 0xad, 0x5c, 0x49, 0x23, 0xa9, 0x1c, 0xc7, 0x19, 0xe1, 0x24, 0xce, 0x95,
	0xbc, 0xba, 0x86, 0x63, 0x0a, 0xc7, 0x34, 0x53, 0x39, 0x4d, 0x35, 0x53, 0x97, 0x9c, 0xb2, 0x08,
	0x58, 0xfc, 0xab, 0xbc, 0x12, 0x59, 0x2e, 0x02, 0xce, 0xef, 0x66, 0x52, 0x66, 0x63, 0x16, 0x93,
	0x9c, 0xc7, 0x44, 0x08, 0x69, 0x88, 0xe1, 0x52, 0xe8, 0xe2, 0x8a, 0xff, 0xb7, 0xce, 0x92, 0x73,
	0x91, 0xb9, 0xbc, 0x57, 0x9b, 0x13, 0x65, 0x04, 0x53, 0x4d, 0x23, 0xa6, 0xba, 0xcc, 0xb7, 0x5f,
	0xbf, 0xa0, 0x76, 0x42, 0x38, 0x19, 0xda, 0x20, 0x51, 0x39, 0xc5, 0xa7, 0xe8, 0xf3, 0x90, 0x8b,
	0x0c, 0xff, 0x8b, 0x6a, 0x0a, 0x47, 0x36, 0x3a, 0x62, 0x17, 0x53, 0xa6, 0x8d, 0xdf, 0x6b, 0x20,
	0x74, 0x2e, 0x85, 0x66, 0xe1, 0xcf, 0xfb, 0xe7, 0x97, 0xa7, 0x4f, 0x2d, 0xfc, 0x0d, 0x36, 0xb4,
	0xd5, 0xf1, 0x0c, 0xb5, 0x0e, 0xb9, 0x36, 0xc3, 0xa2, 0x26, 0xee, 0xd7, 0x0e, 0x59, 0x20, 0x4a,
	0xdb, 0xc6, 0x6a, 0xd0, 0x49, 0x3b, 0x20, 0xfd, 0x8e, 0xdb, 0x85, 0xb4, 0x48, 0x35, 0xbe, 0xf3,
	0x10, 0x4a, 0xd8, 0x5c, 0xbc, 0x5e, 0x3b, 0xaf, 0x02, 0x4a, 0x6f, 0x7f, 0x25, 0xe7, 0xb4, 0x21,
	0x68, 0xbb, 0xd8, 0x5f, 0xd2, 0xc6, 0x37, 0xee, 0x94, 0xf2, 0xd1, 0x2d, 0x9e, 0x21, 0xb4, 0x37,
	0x1a, 0x35, 0x57, 0xa8, 0x80, 0xe6, 0x0a, 0x8b, 0x9c, 0xab, 0xf0, 0x07, 0x2a, 0xe0, 0x70, 0x79,
	0xf3, 0x1d, 0x6f, 0x80, 0x1f, 0x3d, 0xd4, 0x4e, 0x98, 0x39, 0xd6, 0x4c, 0x1d, 0x9c, 0x4d, 0xc5,
	0xb9, 0xc6, 0x9b, 0xef, 0xed, 0x55, 0x31, 0xa5, 0x7f, 0xf0, 0x11, 0xd4, 0x55, 0xe8, 0x41, 0x85,
	0x20, 0xfc, 0x5d, 0x54, 0x80, 0xff, 0x8d, 0x02, 0x02, 0xbf, 0x9d, 0xed, 0x62, 0xd0, 0x57, 0x77,
	0x57, 0xe3, 0xff, 0x4d, 0xa3, 0xe7, 0x05, 0xd6, 0x56, 0x50, 0xce, 0x1d, 0x80, 0xbb, 0x13, 0xfe,
	0x58, 0x70, 0x5b, 0xa9, 0xfd, 0x02, 0xfb, 0xbb, 0x28, 0xa0, 0x72, 0x12, 0x19, 0x5a, 0xcd, 0x28,
	0x26, 0x02, 0x77, 0x12, 0xd8, 0x80, 0xca, 0xc9, 0xfc, 0x9d, 0x14, 0xaf, 0x06, 0xc2, 0x07, 0xcf,
	0x7b, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x54, 0x9e, 0x5c, 0xd6, 0xf2, 0x03, 0x00, 0x00,
}
