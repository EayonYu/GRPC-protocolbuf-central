// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: protocol/gaia/proxy/gaia_proxy_grpc_service.proto

package proxy

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_protocol_gaia_proxy_gaia_proxy_grpc_service_proto protoreflect.FileDescriptor

var file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_rawDesc = []byte{
	0x0a, 0x31, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x61, 0x69, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x61, 0x69, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61,
	0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x67, 0x61, 0x69, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x67, 0x61, 0x69, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x61, 0x69, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xce, 0x04, 0x0a, 0x0d, 0x47,
	0x61, 0x69, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x47, 0x72, 0x70, 0x63, 0x12, 0x5e, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x67, 0x61, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0b, 0x12, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x77, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x67, 0x61, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x67, 0x61, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x67, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x3d, 0x0a, 0x1b, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x63, 0x6c, 0x2e, 0x67, 0x61, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5a, 0x1b, 0x74, 0x63, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x61, 0x69, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x88, 0x01, 0x01,
}

var file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_goTypes = []interface{}{
	(*PingRequest)(nil),         // 0: protocol.gaia.proxy.PingRequest
	(*ListPartnerRequest)(nil),  // 1: protocol.gaia.proxy.ListPartnerRequest
	(*GetPartnerRequest)(nil),   // 2: protocol.gaia.proxy.GetPartnerRequest
	(*AddPartnerRequest)(nil),   // 3: protocol.gaia.proxy.AddPartnerRequest
	(*ProxyRequest)(nil),        // 4: protocol.gaia.proxy.ProxyRequest
	(*PingResponse)(nil),        // 5: protocol.gaia.proxy.PingResponse
	(*ListPartnerResponse)(nil), // 6: protocol.gaia.proxy.ListPartnerResponse
	(*GetPartnerResponse)(nil),  // 7: protocol.gaia.proxy.GetPartnerResponse
	(*AddPartnerResponse)(nil),  // 8: protocol.gaia.proxy.AddPartnerResponse
	(*ProxyResponse)(nil),       // 9: protocol.gaia.proxy.ProxyResponse
}
var file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_depIdxs = []int32{
	0, // 0: protocol.gaia.proxy.GaiaProxyGrpc.Ping:input_type -> protocol.gaia.proxy.PingRequest
	1, // 1: protocol.gaia.proxy.GaiaProxyGrpc.ListPartner:input_type -> protocol.gaia.proxy.ListPartnerRequest
	2, // 2: protocol.gaia.proxy.GaiaProxyGrpc.GetPartner:input_type -> protocol.gaia.proxy.GetPartnerRequest
	3, // 3: protocol.gaia.proxy.GaiaProxyGrpc.AddPartner:input_type -> protocol.gaia.proxy.AddPartnerRequest
	4, // 4: protocol.gaia.proxy.GaiaProxyGrpc.Proxy:input_type -> protocol.gaia.proxy.ProxyRequest
	5, // 5: protocol.gaia.proxy.GaiaProxyGrpc.Ping:output_type -> protocol.gaia.proxy.PingResponse
	6, // 6: protocol.gaia.proxy.GaiaProxyGrpc.ListPartner:output_type -> protocol.gaia.proxy.ListPartnerResponse
	7, // 7: protocol.gaia.proxy.GaiaProxyGrpc.GetPartner:output_type -> protocol.gaia.proxy.GetPartnerResponse
	8, // 8: protocol.gaia.proxy.GaiaProxyGrpc.AddPartner:output_type -> protocol.gaia.proxy.AddPartnerResponse
	9, // 9: protocol.gaia.proxy.GaiaProxyGrpc.Proxy:output_type -> protocol.gaia.proxy.ProxyResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_init() }
func file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_init() {
	if File_protocol_gaia_proxy_gaia_proxy_grpc_service_proto != nil {
		return
	}
	file_protocol_gaia_proxy_ping_proto_init()
	file_protocol_gaia_proxy_partner_proto_init()
	file_protocol_gaia_proxy_proxy_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_goTypes,
		DependencyIndexes: file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_depIdxs,
	}.Build()
	File_protocol_gaia_proxy_gaia_proxy_grpc_service_proto = out.File
	file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_rawDesc = nil
	file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_goTypes = nil
	file_protocol_gaia_proxy_gaia_proxy_grpc_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GaiaProxyGrpcClient is the client API for GaiaProxyGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GaiaProxyGrpcClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// partner management
	ListPartner(ctx context.Context, in *ListPartnerRequest, opts ...grpc.CallOption) (*ListPartnerResponse, error)
	GetPartner(ctx context.Context, in *GetPartnerRequest, opts ...grpc.CallOption) (*GetPartnerResponse, error)
	AddPartner(ctx context.Context, in *AddPartnerRequest, opts ...grpc.CallOption) (*AddPartnerResponse, error)
	// proxy
	Proxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
}

type gaiaProxyGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGaiaProxyGrpcClient(cc grpc.ClientConnInterface) GaiaProxyGrpcClient {
	return &gaiaProxyGrpcClient{cc}
}

func (c *gaiaProxyGrpcClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaProxyGrpcClient) ListPartner(ctx context.Context, in *ListPartnerRequest, opts ...grpc.CallOption) (*ListPartnerResponse, error) {
	out := new(ListPartnerResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/ListPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaProxyGrpcClient) GetPartner(ctx context.Context, in *GetPartnerRequest, opts ...grpc.CallOption) (*GetPartnerResponse, error) {
	out := new(GetPartnerResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/GetPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaProxyGrpcClient) AddPartner(ctx context.Context, in *AddPartnerRequest, opts ...grpc.CallOption) (*AddPartnerResponse, error) {
	out := new(AddPartnerResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/AddPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaProxyGrpcClient) Proxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, "/protocol.gaia.proxy.GaiaProxyGrpc/Proxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GaiaProxyGrpcServer is the server API for GaiaProxyGrpc service.
type GaiaProxyGrpcServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// partner management
	ListPartner(context.Context, *ListPartnerRequest) (*ListPartnerResponse, error)
	GetPartner(context.Context, *GetPartnerRequest) (*GetPartnerResponse, error)
	AddPartner(context.Context, *AddPartnerRequest) (*AddPartnerResponse, error)
	// proxy
	Proxy(context.Context, *ProxyRequest) (*ProxyResponse, error)
}

// UnimplementedGaiaProxyGrpcServer can be embedded to have forward compatible implementations.
type UnimplementedGaiaProxyGrpcServer struct {
}

func (*UnimplementedGaiaProxyGrpcServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedGaiaProxyGrpcServer) ListPartner(context.Context, *ListPartnerRequest) (*ListPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartner not implemented")
}
func (*UnimplementedGaiaProxyGrpcServer) GetPartner(context.Context, *GetPartnerRequest) (*GetPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartner not implemented")
}
func (*UnimplementedGaiaProxyGrpcServer) AddPartner(context.Context, *AddPartnerRequest) (*AddPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPartner not implemented")
}
func (*UnimplementedGaiaProxyGrpcServer) Proxy(context.Context, *ProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}

func RegisterGaiaProxyGrpcServer(s *grpc.Server, srv GaiaProxyGrpcServer) {
	s.RegisterService(&_GaiaProxyGrpc_serviceDesc, srv)
}

func _GaiaProxyGrpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaProxyGrpc_ListPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).ListPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/ListPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).ListPartner(ctx, req.(*ListPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaProxyGrpc_GetPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).GetPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/GetPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).GetPartner(ctx, req.(*GetPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaProxyGrpc_AddPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).AddPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/AddPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).AddPartner(ctx, req.(*AddPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaProxyGrpc_Proxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaProxyGrpcServer).Proxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gaia.proxy.GaiaProxyGrpc/Proxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaProxyGrpcServer).Proxy(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GaiaProxyGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.gaia.proxy.GaiaProxyGrpc",
	HandlerType: (*GaiaProxyGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GaiaProxyGrpc_Ping_Handler,
		},
		{
			MethodName: "ListPartner",
			Handler:    _GaiaProxyGrpc_ListPartner_Handler,
		},
		{
			MethodName: "GetPartner",
			Handler:    _GaiaProxyGrpc_GetPartner_Handler,
		},
		{
			MethodName: "AddPartner",
			Handler:    _GaiaProxyGrpc_AddPartner_Handler,
		},
		{
			MethodName: "Proxy",
			Handler:    _GaiaProxyGrpc_Proxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/gaia/proxy/gaia_proxy_grpc_service.proto",
}
